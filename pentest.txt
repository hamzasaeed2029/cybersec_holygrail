::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::PENTESTING:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

						PENTESTING TOOLS AND PROCEDURE

    • OS/Server side
	For pentesting can be Black Arch Linux or Kali linux	
		• OS command injection
			OS command injection (also known as shell injection) is a web security vulnerability that allows an attacker to execute arbitrary operating system (OS) commands on the server that is running an application, and typically fully compromise the application and all its data.
			• Commix - it is a command injection exploitation tool used for testing command injection vulnerabilities in web applications. Command injection, also known as shell injection is achieved through vulnerable applications. For the attack to be successful, the application must pass unsecure user supplied data to the system shell.
				download: git clone https://github.com/commixproject/commix.git
				usage:  $ commix --url https://testsite.com
					$ commix -h

		• SSL/TLS
			• Heartbleed + Ticketbleed + GOLDENDOODLE + POODLE Zombie POODLE + Sleeping POODLE + ROBOT
				• [Online detection] - put site url in the box given in link (https://www.ssllabs.com/ssltest/index.html)

				• A2SV - Auto Scanning to SSL Vulnerability. Support Vulnerabilities like Anonymous Cipher, CRIME(SPDY), CCS Injection, HeartBleed, SSLv3 POODLE, FREAK Attack, LOGJAM Attack and SSLv2 DROWN
					Download: https://github.com/hamzasaeed2029/a2sv.git
					Install:  cd a2sv
					Install Python Package / OpenSSL:  pip install argparse
						  			   pip install netaddr
						  			   apt-get install openssl
					Usage: python a2sv.py -h
					Examples: 	python a2sv.py -t 127.0.0.1
							python a2sv.py -t 127.0.0.1 -m heartbleed
							python a2sv.py -t 127.0.0.1 -d n
							python a2sv.py -t 127.0.0.1 -p 8111
							python a2sv.py -tf target_list.txt	  

				• TLS / SSL Vulnerability Checker - 
					Pre-req: Python 3.4.0 - Python.org
						 TLSFuzzer - https://github.com/tomato42/tlsfuzzer
						 tlslite-ng - https://github.com/tomato42/tlslite-ng
						 ECDSA - https://github.com/warner/python-ecdsa
					Usage:   [-h hostname] -h hostname hostname to connect to, "sslvulnerabilitychecker.com" by default --help 
					Example: Python sslchecker.py -h sslvulnerabilitychecker.com

				• SSLyze - It is a fast and powerful SSL/TLS scanning library. It allows you to analyze the SSL/TLS configuration of a server by connecting to it, in order to detect various issues (bad certificate, weak cipher suites, Heartbleed, ROBOT, TLS 1.3 support, etc.). 
					SSLyze can either be used as command line tool or as a Python library.
					Download: git clone https://github.com/nabla-c0d3/sslyze.git
					Install:  pip install --upgrade setuptools
						  pip install --upgrade sslyze
						  python -m sslyze --regular www.yahoo.com:443 www.google.com "[2607:f8b0:400a:807::2004]:443"

		• Shellshock
			Shellshock is a vulnerability in GNU Bourne Again Shell (BASH), which allows an attacker to run arbitrary commands using specially crafted environment variables.
			Condition 1 – Your bash version should be vulnerable (through 4.3).
			Condition 2 – An attacker should be able to control the environment variables being passed.
			Condition 3 – A new bash shell should be spawned (sub process)
				$ env x= '() { :;}; echo shellshocked' bash –c "echo test"  
			Running the above line in your terminal shows if you are vulnerable to Shellshock. If “shellshocked” gets printed in the output, you are vulnerable and it’s time to update. For command details visit:(https://mk0resourcesinfm536w.kinstacdn.com/wp-content/uploads/103114_1609_PracticalSh18.png)
			
		• SSRF
			Server Side Request Forgery or SSRF is a vulnerability in which an attacker forces a server to perform requests on their behalf.
			• SSRFmap - SSRF are often used to leverage actions on other services, this framework aims to find and exploit these services easily. SSRFmap takes a Burp request file as input and a parameter to fuzz.
				Download:      git clone https://github.com/hamzasaeed2029/SSRFmap.git
				Installation:  cd SSRFmap/
					       pip3 install -r requirements.txt
        				       python3 ssrfmap.py
				Usage:         ssrfmap.py [-h] [-r REQFILE] [-p PARAM] [-m MODULES] [-l HANDLER]
                  			   	    [-v [VERBOSE]] [--lhost LHOST] [--lport LPORT]
                				    [--uagent USERAGENT] [--ssl [SSL]] [--level [LEVEL]]
				Example:       (https://github.com/hamzasaeed2029/SSRFmap#examples)

			• PhantomJS - (phantomjs.org) is a headless WebKit scriptable with JavaScript.			
				Download: git clone https://github.com/ariya/phantomjs.git
					  cd phantomjs
					  chmod +x build.py
					  ./build.py
				Use case:
				    > Headless web testing. Lightning-fast testing without the browser is now possible!
				    > Page automation. Access and manipulate web pages with the standard DOM API, or with usual libraries like jQuery.
				    > Screen capture. Programmatically capture web contents, including CSS, SVG and Canvas. Build server-side web graphics apps, from a screenshot service to a vector chart rasterizer.
				    > Network monitoring. Automate performance analysis, track page loading and export as standard HAR format.
				Usage: (https://www.youtube.com/watch?v=z9ct4OoRQ_M)
					./xxrf.sh

			• SSRF-Testing - (https://github.com/hamzasaeed2029/SSRF-Testing)

		• Escape Restricted Shell Environments on Linux
			Restricted shells are simply shells with restricted permissions, features, or commands. They are primarily used to ensure that users can perform the minimum operations necessary for daily function in a secure, contained environment. Administrators might also use them to make sure they don't enter any dangerous commands accidentally. Sometimes, these restricted shells might even be put in place to dissuade hackers
			The most common types of restricted shells are just normal shells with certain limitations in place, such as rbash, rksh, and rzsh. Other types can be configured more to suit certain needs and tighten restrictions, like lshell and rssh.
			Procedure: For procedure visit: [https://null-byte.wonderhowto.com/how-to/escape-restricted-shell-environments-linux-0341685/]

		• Search for abusable Binaries during post exploitation
		  	GTFOBins and LOLBAS are projects with the goal of documenting native binaries that can be abused and exploited by attackers on Unix and Windows systems, respectfully. These binaries are often used for "living off the land" techniques during post-exploitation. In this tutorial, we will be exploring gtfo, a tool used to search these projects for abusable binaries right from the command line.
			Living off the land is a method used by attackers that utilizes existing tools and features in the target environment to further the attack. Goals can include privilege escalation, lateral movement, persistence, data exfiltration, spawning reverse shells, and more.
			• Gtfo - gtfo is a tool purely written in python3 to search binaries on GTFOBins and LOLBAS.
				Download: git clone https://github.com/hamzasaeed2029/gtfo.git
				Pre-requisites: apt install python3-pip
						pip3 install -r requirements.txt
				Run:  ./gtfo
				Usage: [https://null-byte.wonderhowto.com/how-to/use-gtfo-search-for-abusable-binaries-during-post-exploitation-0341686/]
				       [https://github.com/hamzasaeed2029/gtfo]

		• Brute-Force FTP Credentials - File Transfer Protocol is a network protocol used to transfer files. It uses a client-server model in which users can connect to a server using an FTP client. Authentication takes place with a username and password, typically transmitted in plaintext, but can also support anonymous logins if available.
			Details: [https://null-byte.wonderhowto.com/how-to/brute-force-ftp-credentials-get-server-access-0208763/]

		• linux shadow file cracking
			Zydra - Zydra is a file password recovery tool and Linux shadow file cracker. It uses the dictionary search or Brute force method for cracking passwords
			Supported files: RAR Files, Legacy ZIP Files, PDF Files and Linux Shadow Files
			Download:  git clone https://github.com/hamzasaeed2029/Zydra.git
			Pre-requisites: sudo apt-get install qpdf unrar
					pip3 install py-term
					sudo wget http://www.figlet.org/fonts/epic.flf -O /usr/share/figlet/epic.flf
			usage: python3 Zydra.py -h
			For more info: [https://github.com/hamzasaeed2029/Zydra]
						   [https://null-byte.wonderhowto.com/how-to/crack-password-protected-zip-files-pdfs-more-with-zydra-0207607/]
					

    • Network Services
		1) Firewall pentesting
		   	Firewall pentesting lies in between intrusion prevention system (IPS) and intrusion detection system (IDS).
			By following given steps we can perform firewall pentesting: (https://purplesec.us/firewall-penetration-testing/)
			Step 1.  Locating The Firewall
			Step 2.  Conducting Traceroute
			Step 3.  Port Scanning
			Step 4.  Banner Grabbing
			Step 5.  Access Control Enumeration
			Step 6.  Identifying Firewall Architecture
			Step 7.  Testing The Firewall Policy
			Step 8.  Firewalking
			Step 9.  Port Redirection
			Step 10. Internal And External Testing
			Step 11. Test For Covert Channels
			Step 12. HTTP tunneling
			Step 13. Identify Firewall Specific Vulnerabilities
			Step 14. Documenting Penetration Testing Findings

		2) ARP Spoofing (Man-in-the-middle)

			• Ettercap - Ettercap is a comprehensive suite for man in the middle attacks. It features sniffing of live connections, content filtering on the fly and many other interesting tricks. It supports active and passive dissection of many protocols and
					includes many features for network and host analysis.
				install: apt install ettercap-common
				usage: ettercap -h  (https://www.youtube.com/watch?v=hI9J_tnNDCc)
				list of network interfaces: etteracap -I 
				for more info: (https://www.poftut.com/ettercap-tutorial-network-sniffing-man-middle/)

			• Arpstraw - It is an open source [MITM] detection tool that notify user when it detect an ArpSpoof attack. It rests on a config file arpstraw.cfg where you can specify each host you know in your network.
				download: git clone https://github.com/hamzasaeed2029/arpstraw.git
				install:  pip install -r requirements.txt
				usage: sudo python main.py -h
				detection on interface: sudo python main.py -i eth0
				detection on pcap: sudo python main.py -f myfile.pcap
				
			• ARP Spoof Detect - It is a simple, lightweight ARP spoofing detector script that checks if your network is being ARP spoofed.				
				Features: 			
					• Detect ARP reply messages in the network.
					• Detect if a machine has launched ARP spoof attack in the network.
					• Log all ARP reply messages and potential ARP spoof attacks in the log file.
					• Send system notification to user once such attack occurs. (Currently only supported in Mac OS X)
				Dependencies: apt-get install python-scapy python-netiface
				download: git clone https://github.com/hamzasaeed2029/arpspoofdetect.git
				usage: python detect_arpspoof.py

			• shARP - This anti- ARP spoofing program, (shARP) detects the presence of a third party in a private network actively. It has 2 mode: defensive and offensive.
				install: git clone https://github.com/europa502/shARP.git
				Usage: (https://github.com/europa502/shARP)
		
			• PyRDP - it is a Python 3 Remote Desktop Protocol (RDP) Man-in-the-Middle (MITM) and library. RDP Man-in-the-Middle have following features:
					> Logs credentials used when connecting
					> Steals data copied to the clipboard
					> Saves a copy of the files transferred over the network
					> Crawls shared drives in the background and saves them locally
					> Saves replays of connections so you can look at them later
					> Runs console commands or PowerShell payloads automatically on new connections
					> See live RDP connections coming from the MITM
				Pre-requisites:		    sudo apt install python3 python3-pip python3-setuptools python3-venv build-essential python3-dev git openssl
				Download:     		    git clone https://github.com/gosecure/pyrdp.git
				Create virtual environment: cd pyrdp
							    python3 -m venv venv (Warning: DO NOT use the root PyRDP directory for the virtual environment folder !)

				Activate virtual environment: source venv/bin/activate (Before installing the dependencies!)
				Install project with pip:     pip3 install -U pip setuptools wheel
							      pip3 install -U -e .  (without gui and ffmpeg dependencies)
				When leaving virtual environment: deactivate
				Usage: pyrdp-mitm.py <ServerIP>
				       pyrdp-mitm.py <ServerIP>:<ServerPort>
				Must visit before using it for the fiest time: (https://github.com/GoSecure/pyrdp)

		3) DNS attacks
			• Zone Transfer Attacks
			  	DNS Zone transfer is the process where a DNS server passes a copy of part of it's database (which is called a "zone") to another DNS server. It's how you can have more than one DNS server able to answer queries about a particular zone; there is a Master DNS server,
				and one or more Slave DNS servers, and the slaves ask the master for a copy of the records for that zone. DNS servers should not permit zone transfers towards any IP address from the Internet.

				• [Online] - (https://pentest-tools.com/network-vulnerability-scanning/dns-zone-transfer-check)

				• DNSenum - multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks.
					pre-req.: sudo apt install libxml-writer-perl
						  sudo apt install libnet-netmask-perl
						  sudo apt install libstring-random-perl
					download: git clone https://github.com/fwaeytens/dnsenum.git
			
		4) DOS attacks
			• Pentmenu - A bash select menu for quick and easy network recon and DOS attacks
				download: git clone https://github.com/GinjaChris/pentmenu
				usage: (https://github.com/GinjaChris/pentmenu)
			• HULK - HULK is a Denial of Service (DoS) tool used to attack web servers by generating volumes of unique and obfuscated traffic. HULK’s generated traffic also bypasses caching engines and hits the server’s direct resource pool. Both python and Go versions are available.
				#sudo python hulk.py <url address>
				#sudo python hulk.py http://<IP>:<PortNo>/
			• Quack - Quack Toolkit is a set of tools to provide denial of service attacks. Quack Toolkit includes SMS attack tool, HTTP attack tool and many other attack tools.
				usage: quack [-h] [--target <ip:port/URL/phone>]
							[--tool [SMS|NTP|TCP|UDP|SYN|POD|SLOWLORIS|MEMCACHED|HTTP|NJRAT]]
							[--timeout <timeout>] [--threads <threads>] [-u] [--version]
				
				optional arguments:
				-h, --help            show this help message and exit
				--target <ip:port/URL/phone>
										Target IP and port, URL or phone.
				--tool [SMS|NTP|TCP|UDP|SYN|POD|SLOWLORIS|MEMCACHED|HTTP|NJRAT]
										Attack tool.
				--timeout <timeout>   Timeout in seconds.
				--threads <threads>   Threads count.
				-u, --update          Update Quack Toolkit.
				--version             Show Quack Toolkit version.
				examples: (sms attack) quack --tool SMS --target 15554443333 --timeout 10 --threads 10
					(http attack) quack --tool HTTP --target http://example.com/ --timeout 10 --threads 10
					(TCP attack)  quack --tool TCP --target 192.168.1.100:80 --timeout 10 --threads 10	

		5) Others
			• Nikto - (Imp!)An open-source project sponsored by Netsparker aims to find web server misconfiguration, plugins, and web vulnerabilities. Nikto perform a comprehensive test against over 6500 risk items.
				Installation: sudo apt-get install nikto -y (pre-installed in kali)
				Usage: (https://tools.kali.org/information-gathering/nikto)

			• ZAP (Zet Attack Proxy) is one of the famous penetration testing tools which is actively updated by hundreds of volunteer worldwide. It’s a cross-platform Java-based tool that can run even on Raspberry Pi.
			   ZIP sits between a browser and web application to intercept and inspect messages
				Download: (https://www.zaproxy.org/download/)
				Usage:    (https://www.youtube.com/playlist?list=PLEBitBW-Hlsv8cEIUntAO8st2UGhmrjUB)
					  (https://www.zaproxy.org/getting-started/)
			
			• Nmap - Supports dozens of advanced techniques for mapping out networks filled with IP filters, firewalls, routers, and other obstacles.  Nmap has been used to scan huge networks of literally hundreds of thousands of machines
				Usage:      (https://tools.kali.org/information-gathering/nmap)
				Cheatsheet: (https://www.hahwul.com/2020/08/02/nmap-cheatsheet/)

			• Lynis - Lynis is an Automated security auditing tool for systems based on UNIX like Linux, macOS, BSD, and others. It performs an in-depth security scan and runs on the system itself. 
				Download: git clone https://github.com/hamzasaeed2029/lynis.git
				Usage:   cd lynis; ./lynis audit system (run this as a root user)
				
			• Sublist3r - it is a python tool designed to enumerate subdomains of websites using OSINT. It helps penetration testers and bug hunters collect and gather subdomains for the domain they are targeting. Sublist3r enumerates subdomains using many search engines such as Google, Yahoo, Bing, Baidu and Ask. Sublist3r also enumerates subdomains using Netcraft, Virustotal, ThreatCrowd, DNSdumpster and ReverseDNS.
			    subbrute was integrated with Sublist3r to increase the possibility of finding more subdomains using bruteforce with an improved wordlist. The credit goes to TheRook who is the author of subbrute.
				Download: git clone https://github.com/hamzasaeed2029/Sublist3r.git
				pre-requisites: [python 2.7.x  or  3.4.x [recommended]]
								cd Sublist3r/
								sudo pip install -r requirements.txt
				Usage:  [https://github.com/hamzasaeed2029/Sublist3r]
				Example: python sublist3r.py -d google.com


			• Pentest-Tools-Framework -  Pentest Tools Framework is a database of exploits, Scanners and tools for penetration testing. Pentest is a powerful framework includes a lot of tools for beginners.
			   You can explore kernel vulnerabilities, network vulnerabilities.				
				Download:       git clone https://github.com/hamzasaeed2029/Pentest-Tools-Framework.git
				Installation:   $ cd Pentest-Tools-Framework
						$ pip install -r requirements.txt
						$ python install.py
						$ PTF
				[After running install.py you should select your backbox/kali linux /parrot Os , all computer OS]
				
    • Application
	1) Web application

		• Grabber - It is a web application scanner. Basically it detects some kind of vulnerabilities in your website. Grabber is simple, not fast but portable and really adaptable. This software is designed to scan small websites such as personals, forums etc. absolutely not big application: it would take too long time and flood your network.
			Download: http://rgaucher.info/beta/grabber/Grabber.zip
			Usage:    python grabber.py --spider 1 --sql --xss --url http:site123.com/

		• Bruteforce attacks
			• HYDRA - bruteforce password cracking tool. 
				Example -L /home/scm/username.txt -P /usr/share/metasploit-framework/data/wordlists/cms400net_default_userpass.txt 192.168.0.10 http-post-form "http://smartestgate.com/login:username=^USER^&password=^PASS^&Login=Login failed" -V

			• Medusa - login bruteforcer. 
				Example: medusa -h 192.168.0.10 -U '/home/scm/username.txt' -P '/usr/share/metasploit-framework/data/wordlists/cms400net_default_userpass.txt' -M http

			• BruteDum - BruteDum is a SSH, FTP, Telnet, PostgreSQL, RDP, VNC brute forcing tool with Hydra, Medusa and Ncrack. BruteDum can work with any Linux distros if they support Python 3.
				Download: git clone https://github.com/hamzasaeed2029/BruteDum.git
				Usage: python3 brutedum.py

		• Backdoor
			• Pupy - it is an open source tool for cross-platform remote administration (Windows, Linux, OSX, Android are supported as “clients”) and post-exploitation
				Installation: 	(https://miloserdov.org/?p=2863)
				sudo apt install git libssl1.0-dev libffi-dev python-dev python-pip build-essential swig tcpdump python-virtualenv
				git clone --recursive https://github.com/n1nj4sec/pupy
				cd pupy
				python create-workspace.py -DG pupyw
				To fix the error:
				sudo pip2 install rpyc==3.4.4
				For start:
				export PATH=$PATH:~/.local/bin; pupysh
				pupyws/bin/pupysh
				Usage: (https://miloserdov.org/?p=2874)

			• PHP-backdoor-detector - PHP backdoor detector is a Python toolkit that helps you find malicious hidden suspicious PHP scripts and shells in your site files.
				Download: wget https://raw.githubusercontent.com/yassineaddi/PHP-backdoor-detector/master/
				Usage: python php-backdoor-detector.py [options] <directory>

			• rkhunter - rkhunter is a Unix-based tool that scans for rootkits, backdoors and possible local exploits. (https://www.digitalocean.com/community/tutorials/how-to-use-rkhunter-to-guard-against-rootkits-on-an-ubuntu-vps)
				download: wget http://downloads.sourceforge.net/project/rkhunter/rkhunter/1.4.0/rkhunter-1.4.0.tar.gz
					tar xzvf rkhunter*
					cd rkhunter*
					sudo ./installer.sh --layout /usr --install
					sudo apt-get update
					sudo apt-get install binutils libreadline5 libruby1.8 ruby ruby1.8 ssl-cert unhide.rb mailutils
				usage: sudo rkhunter --versioncheck
					sudo rkhunter --update
					sudo rkhunter --propupd
					sudo rkhunter --check   

		• Message Queue & Broker Injection tool 
			• Enteletaor - by using enteletaor you can perform actions like Listing remote tasks, Read remote task content, Disconnect remote clients from Redis server (even the admin!)Inject tasks into remote processes, Make a scan to discover open brokers and Try to discover user/passwords in auth protected brokers
				# enteletaor scan -h
				usage: enteletaor.py redis [-h]
									{info,disconnect,dump,cache,discover-dbs,connected}
									...
					positional arguments:
					{info,disconnect,dump,cache,discover-dbs,connected}
										redis commands:
						info                open a remote shell through the Redis server
						disconnect          disconnect one or all users from Redis server
						dump                dumps all keys in Redis database
						cache               poison remotes cache using Redis server
						discover-dbs        discover all Redis DBs at server
						connected           get connected users to Redis server
				
				optional arguments:
					-h, --help            show this help message and exit
				Examples:
					Enteletaor has 5 verbosity levels. You can modify level adding -v to command line:
					# enteletaor -v scan -t 10.10.0.10  
					# enteletaor redis disconnect -t 10.10.0.10 --all
				(https://enteletaor.readthedocs.io/en/latest/quickstart.html)
				(https://enteletaor.readthedocs.io/en/latest/advanced.html#redis)

		• XML external entity attack
			XXE (XML External Entity) attacks happen when an XML parser improperly processes input from a user that contains an external entity declaration in the doctype of an XML payload. This external entity may contain further code which allows an attacker to read sensitive data 
			on the system or potentially perform other more severe actions. 
			Payload lists:   (https://github.com/omurugur/XXE_Payload_List) 
					 (https://github.com/payloadbox/xxe-injection-payload-list)
			For more info:   (https://github.com/mgeeky/Penetration-Testing-Tools/blob/master/web/xml-attacks.md)

		• Cross site request Forgery
			• XSRFProbe - It is an advanced Cross Site Request Forgery (CSRF/XSRF) Audit and Exploitation Toolkit. Equipped with a powerful crawling engine and numerous systematic checks, it is able to detect most cases of CSRF vulnerabilities, their related bypasses and futher generate (maliciously) exploitable proof of concepts with each found vulnerability. 
				Download: pip install xsrfprobe
					  python3 setup.py install
					  xsrfprobe --help

				General usage: (https://github.com/0xinfection/xsrfprobe/wiki/general-usage)
				Advanced usage: (https://github.com/0xinfection/xsrfprobe/wiki/advanced-usage)

		• Others
			• VulnyCode - Basic script to detect most of the vulnerabilities into a PHP source code, it is using Regular Expression to find sinkholes.
				Download: git clone https://github.com/hamzasaeed2029/Vulny-Code-Static-Analysis.git
				Usage:    python3 index.py --dir test

			• Wfuzz - (The Web Fuzzer) is an application assessment tool for penetration testing. Wfuzz provides a framework to automate web applications security assessments and could help you to secure your web applications by finding and exploiting web application vulnerabilities.		
				Wfuzz bruteforcer cli:$ wfuzz -w wordlist/general/common.txt --hc 404 http://testphp.vulnweb.com/FUZZ
				payload generator: $ wfpayload -z range,0-10
			• Wapiti - it scans the web pages of a given target and looks for scripts and forms to inject the data to see if that is vulnerable. It is not a source code security checks; instead, it performs black-box scans.
				Shortcut to scan: wapiti -u http://target/
				usage: wapiti [-h] [-u URL] [--scope {page,folder,domain,url,punk}]
							[-m MODULES_LIST] [--list-modules] [-l LEVEL] [-p PROXY_URL]
							[--tor] [-a CREDENTIALS]
							[--auth-type {basic,digest,kerberos,ntlm}] [-c COOKIE_FILE]
							[--skip-crawl] [--resume-crawl] [--flush-attacks]
							[--flush-session] [--store-session PATH] [-s URL] [-x URL]
							[-r PARAMETER] [--skip PARAMETER] [-d DEPTH]
							[--max-links-per-page MAX] [--max-files-per-dir MAX]
							[--max-scan-time MINUTES] [--max-parameters MAX] [-S FORCE]
							[-t SECONDS] [-H HEADER] [-A AGENT] [--verify-ssl {0,1}]
							[--color] [-v LEVEL] [-f FORMAT] [-o OUPUT_PATH]
							[--external-endpoint EXTERNAL_ENDPOINT_URL]
							[--internal-endpoint INTERNAL_ENDPOINT_URL]
							[--endpoint ENDPOINT_URL] [--no-bugreport] [--version]
				wapiti: error: one of the arguments -u/--url --list-modules is required	

			• w3af - Web Application Attack and Audit Framework is an open source web application security scanner which helps developers and penetration testers identify and exploit vulnerabilities in their web applications. The scanner is able to identify 200+ vulnerabilities, including Cross-Site Scripting, SQL injection and OS commanding.
			    It’s built on a plugin architecture, and you can check out all the plugins available here (http://w3af.org/plugins)
				Download: git clone https://github.com/andresriancho/w3af.git
				Usage:    ./w3af_console
					  (then enter help in console to look at the list of available commands)
					  (then enter keys in console to look at the various shortcuts keys available to us)
					  (for more info: https://resources.infosecinstitute.com/w3af-tutorial/)

			• Vega - it is a free and open source web security scanner and web security testing platform to test the security of web applications. Vega can help you find and validate SQL Injection, Cross-Site Scripting (XSS), inadvertently disclosed sensitive information, and other vulnerabilities.
				 It is written in Java, GUI based, and runs on Linux, OS X, and Windows. Vega can help you find vulnerabilities such as: reflected cross-site scripting, stored cross-site scripting, blind SQL injection, remote file include, shell injection, and others.
				 Vega also probes for TLS / SSL security settings and identifies opportunities for improving the security of your TLS servers.

	2) Android
		• Android backup extractor:
			Utility to extract and repack Android backups created with adb backup (ICS+). Largely based on BackupManagerService.java from AOSP. 
			Tip !! "adb backup" command can also be used for extracting application package with the following command:
				adb backup <package name>
				dd if=backup.ab bs=1 skip=24 | python -c "import zlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))" > backup.tar

		• Apk reverse engineering:
			APKTool - A tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild
			them after making some modifications.
			• Disassembling Android apk file:
				apktool d <apk file>
			• Rebuilding decoded resources back to binary APK/JAR with certificate signing:
				apktool b <modified folder>
				keytool -genkey -v -keystore keys/test.keystore -alias Test -keyalg RSA -keysize 1024 -sigalg SHA1withRSA -validity 10000
				jarsigner -keystore keys/test.keystore dist/test.apk -sigalg SHA1withRSA -digestalg SHA1 Test

		• Android vulnerability scanners:
			• SUPER - SUPER is a command-line application that can be used in Windows, MacOS X and Linux, that analyzes .apk files in search for vulnerabilities.
			   It does this by decompressing APKs and applying a series of rules to detect those vulnerabilities.

			• AndroBugs - AndroBugs Framework is an efficient Android vulnerability scanner that helps developers or hackers find potential security vulnerabilities 
			   in Android applications. No need to install on Windows.

			• Qark - This tool is designed to look for several security related Android application vulnerabilities, either in source code or packaged APKs.

		• Carriage return and line feed  (CRLF injection vulnerability) - In a CRLF injection vulnerability attack the attacker inserts both the carriage return and linefeed characters into user input to trick the server, the web application or the user into thinking that an object is terminated and another one has started.
		     As such the CRLF sequences are not malicious characters, however they can be used for malicious intend, for HTTP response splitting etc.
			for more info: (https://www.netsparker.com/blog/web-security/crlf-http-header/)
			• CRLF - Auto CRLF Injector 
				Download:       git clone https://github.com/rudSarkar/crlf-injector.git
				Pre-requisite:  pip install requests
				Usage:		python crlf.py
						python crlf.py [domain_list.ext] [crlf_payload]
				Payloads:       /%0aevil-here:malicious_cookie1
						/%0d%0aevil-here:malicious_cookie1
						(https://github.com/cujanovic/CRLF-Injection-Payloads/blob/master/CRLF-payloads.txt)

			• CRLF-injection-scanner - it is a command line tool for testing CRLF injection on a list of domains. (scanner tool)
				Download: git clone https://github.com/MichaelStott/CRLF-Injection-Scanner.git
				Install:  python3 setup.py install
				Example:  crlf scan -u "www.google.com"
				          crlf scan -i "urls.txt"   (for scanning URLs from a file, where the URLs are separated by newlines)

		• All in one pentesting framework:
			• Mobile Security Framework - MobSF - Mobile Security Framework is an intelligent, all-in-one open source mobile application (Android/iOS) automated
			   pen-testing framework capable of performing static and dynamic analysis.
			   	python manage.py runserver 127.0.0.1:1337
			• Drozer - Drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.
				• Starting a session
					adb forward tcp:31415 tcp:31415
					drozer console connect
				• Retrieving package information
					run app.package.list -f <app name>
					run app.package.info -a <package name>
				• Identifying the attack surface
					run app.package.attacksurface <package name>
				• Exploiting Activities
					run app.activity.info -a <package name> -u
					run app.activity.start --component <package name> <component name>
				• Exploiting Content Provider
					run app.provider.info -a <package name>
					run scanner.provider.finduris -a <package name>
					run app.provider.query <uri>
					run app.provider.update <uri> --selection <conditions> <selection arg> <column> <data>
					run scanner.provider.sqltables -a <package name>
					run scanner.provider.injection -a <package name>
					run scanner.provider.traversal -a <package name>
				• Exploiting Broadcast Receivers
					run app.broadcast.info -a <package name>
					run app.broadcast.send --component <package name> <component name> --extra <type> <key> <value>
					run app.broadcast.sniff --action <action>
				• Exploiting Service
					run app.service.info -a <package name>
					run app.service.start --action <action> --component <package name> <component name>
					run app.service.send <package name> <component name> --msg <what> <arg1> <arg2> --extra <type> <key> <value> --bundle-as-obj

		• Bypassing Root Detection and SSL Pinning:
			• Frida CodeShare - The Frida CodeShare project is comprised of developers from around the world working together with one goal - push Frida to its limits in new and innovative ways.
				• Bypassing Root Detection
					frida --codeshare dzonerzy/fridantiroot -f YOUR_BINARY
				• Bypassing SSL Pinning
					frida --codeshare pcipolloni/universal-android-ssl-pinning-bypass-with-frida -f YOUR_BINARY

			• Android-ssl-bypass - an Android debugging tool that can be used for bypassing SSL, even when certificate pinning is implemented, as well as other debugging tasks. The tool runs as an interactive console.			

	3) IOS
		• IOS app reverse engineering and static analysis:

			• bfinject - bfinject loads arbitrary dylibs into running App Store apps. It has built-in support for decrypting App Store apps, and comes bundled with iSpy and Cycript.
				A Simple Test
					bash bfinject -P Reddit -L test
				Decrypt App Store apps
					bash bfinject -P Reddit -L decrypt
				Cycript
					bash bfinject -P Reddit -L cycript

			• Weak Classdump - A Cycript script that generates a header file for the class passed to the function. Most useful when you cannot classdump or dumpdecrypted , when binaries are encrypted etc.
				iPod:~ root# cycript -p Skype weak_classdump.cy; cycript -p Skype
				#cy weak_classdump_bundle([NSBundle mainBundle],"/tmp/Skype")

			• Fridpa - An automated wrapper script for patching iOS applications (IPA files) and work on non-jailbroken device.

			• HopperApp - Hopper is a reverse engineering tool for OS X and Linux, that lets you disassemble, decompile and debug your 32/64bits Intel Mac, Linux, Windows and iOS executables.

		• Bypassing Root Detection and SSL Pinning:
			• Frida CodeShare - The Frida CodeShare project is comprised of developers from around the world working together with one goal - push Frida to its limits in new and innovative ways.
				• Bypassing Root Detection
					frida --codeshare dzonerzy/fridantiroot -f YOUR_BINARY
				• Bypassing SSL Pinning
					frida --codeshare pcipolloni/universal-android-ssl-pinning-bypass-with-frida -f YOUR_BINARY
			• SSL Kill Switch 2 - Blackbox tool to disable SSL certificate validation - including certificate pinning - within iOS and OS X Apps.

	4) Database
		• SQL injection
			• SQLMap - sqlmap is an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws and taking over of database servers. 
				installation: git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev
				Techniques: (https://github.com/sqlmapproject/sqlmap/wiki/Techniques)
				tamper scripts: (https://medium.com/@pentesta/all-sqlmap-tamper-scripts-2019-f91a07e1b4f1)
				usage: $ python sqlmap.py -hh          (https://www.youtube.com/user/inquisb/videos)
				       (In case of Firewall) $ python sqlmap.py -u "http://mytestsite.com/page.php?id=5" --random-agent 
				(https://github.com/sqlmapproject/sqlmap/wiki/Usage)
				(load tamper script rules to evade filters and WAF’s) sqlmap -u 'http://www.site.com:80/search.cmd?form_state=1’ --level=5 --risk=3 -p 'item1' --tamper=apostrophemask,apostrophenullencode,appendnullbyte,base64encode,between,bluecoat,chardoubleencode,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,randomcomments,securesphere,space2comment,space2dash,space2hash,space2morehash,space2mssqlblank,space2mssqlhash,space2mysqlblank,space2mysqldash,space2plus,space2randomblank,sp_password,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords
				General Tamper testing:tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes
				MySQL: tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor
				MSSQL: tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes
				
			• Sqlninja - It is an exploitation tool to be used against web apps based on MS SQL Server that are vulnerable to SQL Injection attacks, in order to get a shell or extract data also in very hostile conditions.
				Download: (http://sqlninja.sourceforge.net/download.html)
				Usage:    (http://sqlninja.sourceforge.net/sqlninja-howto.html#ss1.3)

	5) Memory leakage & corruption
		• MTuner - it is a C/C++ memory profiler and memory leak finder for Windows, PlayStation 4 and 3, Android and other platforms. MTuner utilizes a novel approach to memory profiling and analysis, keeping entire time-based history of memory operations. This gives an unique insight in memory related behavior of your software by making queries over the entire data set
			Download:   git clone https://github.com/milostosic/MTuner.git 
			Dependencies: 
				git clone https://github.com/milostosic/build.git
				git clone https://github.com/milostosic/rbase.git
				git clone https://github.com/milostosic/rdebug.git
				git clone https://github.com/milostosic/rmem.git
				git clone https://github.com/milostosic/rqt.git
				git clone https://github.com/milostosic/MTunerCmd.git
				git clone https://github.com/milostosic/MTunerDLL.git
				git clone https://github.com/milostosic/MTunerInject.gi
				(for windows only) git clone https://github.com/milostosic/DIA.git

			Usage: (https://github.com/milostosic/MTuner)

		• MTHawkeye - It is profiling, debugging tools for iOS used in Meitu. It's designed to help iOS developers improve development productivity and assist in optimizing the App performance. MTHawkeye has built-in some common performance detection plug-ins. It also introduces and improves FLEX as a plug-in for debugging assistance. When you use MTHawkeye, you can customize and add the plug-ins you need.
			Download: git clone https://github.com/hamzasaeed2029/MTHawkeye.git
			Usage:    (https://github.com/hamzasaeed2029/MTHawkeye)			
		
		• StackImpact - It is a production-grade performance profiler built for both production and development environments. The StackImpact profiler agent is imported into a program and used as a normal package. When the program runs, various sampling profilers are started and stopped automatically by the agent and/or programmatically using the agent methods. The agent periodically reports recorded profiles 
		        and metrics to the StackImpact Dashboard. The agent can also operate in manual mode, which should be used in development only.
			Download: git clone https://github.com/stackimpact/stackimpact-python.git
			Install:  pip install stackimpact
			import package in application: import stackimpact
			Usage: (https://github.com/stackimpact/stackimpact-python)

		• Heapusage - it is a light-weight tool for finding memory leaks in Linux and macOS applications. It provides a small but important subset of Valgrind's memcheck functionality, and can be a useful alternative to it for debugging memory leaks in certain scenarios
			Download: git clone https://github.com/d99kris/heapusage.git
			Usage: heapusage ./ex001 (example)

		• node-memwatch - It is here to help you detect and find memory leaks in Node.JS code. It provides:
			> A leak event, emitted when it appears your code is leaking memory.
			> A stats event, emitted occasionally, giving you data describing your heap usage and trends over time.
			> A HeapDiff class that lets you compare the state of your heap between two points in time, telling you what has been allocated, and what has been released.
			Installation: npm install memwatch
				      or $ git clone git://github.com/lloyd/node-memwatch.git
			Usage: (https://github.com/lloyd/node-memwatch)

    • Client Side		
		• Cross-Site Scripting Attacks (XSS)
		  Cheat sheet: (https://github.com/swisskyrepo/PayloadsAllTheThings)
			• XSS-Sniper - XSS-Sniper is not included in Kali Linux, but is definitely worth trying.
				download: git clone https://github.com/gbrindisi/xsssniper.git
				Usage:    python xsssniper.py -u http://10.7.7.5/bodgeit/search.jsp?q=test
				
			• XSSer - Cross Site “Scripter” (aka XSSer) is an automatic -framework- to detect, exploit and report XSS vulnerabilities in web-based applications.
				xsser [OPTIONS] [--all <url> |-u <url> |-i <file> |-d <dork> (options)|-l ] [-g <get> |-p <post> |-c <crawl> (options)]
				[Request(s)] [Checker(s)] [Vector(s)] [Anti-antiXSS/IDS] [Bypasser(s)] [Technique(s)] [Final Injection(s)] [Reporting] {Miscellaneous}

			• XSStrike - it is a Cross Site Scripting detection suite equipped with four hand written parsers, an intelligent payload generator, a powerful fuzzing engine and an incredibly fast crawler that includes:
				• DOM XSS
				• Reflected XSS
				• Crawling
				• Fuzzing
				• Bruteforcing payloads from a file (download all payloads from github repo and use it in attack)
				• Interactive HTTP Headers Prompt
				• Hidden Parameter Discovery
				Download: git clone https://github.com/hamzasaeed2029/XSStrike.git
				Usage: xsstrike.py [-h] [-u TARGET] [--data DATA] [-t THREADS] [--seeds SEEDS] [--json] [--path]
         	 			          [--fuzzer] [--update] [--timeout] [--params] [--crawl] [--blind]
         				          [--skip-dom] [--headers] [--proxy] [-d DELAY] [-e ENCODING]

			• XssPy - XssPy is another python tool for finding Cross Site Scripting vulnerabilities in websites. Usage is as follows:
				Download: git clone https://github.com/faizann24/XssPy/ /opt/xsspy
				Usage:python XssPy.py website.com

			• DalFox - It is a fast, powerful parameter analysis and XSS scanner, based on a golang/DOM parser. supports friendly Pipeline, CI/CD and testing of different types of XSS.
				Download: git clone https://github.com/hamzasaeed2029/dalfox.git
				Usage:    dalfox -h
				Example:  (Single target mode)
					  dalfox url http://testphp.vulnweb.com/listproducts.php\?cat\=123\&artist\=123\&asdf\=ff -b https://hahwul.xss.ht
					  (Multiple target mode with custom payloads)
					  dalfox url http://testphp.vulnweb.com/listproducts.php\?cat\=123\&artist\=123\&asdf\=ff -b https://hahwul.xss.ht

			• DOMPurify - DOMPurify sanitizes HTML and prevents XSS attacks. You can feed DOMPurify with string full of dirty HTML and it will return a string (unless configured otherwise) with clean HTML. DOMPurify will strip out everything that contains dangerous HTML and thereby prevent XSS attacks and other nastiness. It's also damn bloody fast. We use the technologies the browser provides and turn them into an XSS filter. The faster your browser, the faster DOMPurify will be.
				For further info [https://github.com/cure53/DOMPurify/wiki/Security-Goals-&-Threat-Model]
				Download: git clone https://github.com/hamzasaeed2029/DOMPurify.git
				Installation: npm install dompurify
				Usage:  Just include DOMPurify on your website. 
					> Using the unminified development version as:
						<script type="text/javascript" src="src/purify.js"></script>
					> Using the minified and tested production version (source-map available):
						<script type="text/javascript" src="dist/purify.min.js"></script>
					> Afterwards you can sanitize strings by executing the following code:
						var clean = DOMPurify.sanitize(dirty);
				Demo: visit: [https://cure53.de/purify]

		• Clickjacking Attacks
				• Burp Clickbandit - it runs in your browser using JavaScript. It works on all modern browsers except for Internet Explorer and Microsoft Edge. To run Clickbandit, use the following steps.
					step 1) In Burp, go to the Burp menu and select "Burp Clickbandit"
					step 2) On the dialog that opens, click the "Copy Clickbandit to clipboard" button. This will copy the Clickbandit script to your clipboard.
					step 3) In your browser, visit the web page that you want to test, in the usual way.
					step 4) In your browser, open the web developer console. This might also be called "developer tools" or "JavaScript console".
					step 5) Paste the Clickbandit script into the web developer console, and press enter.
					step 6) The Burp Clickbandit banner will appear at the top of the browser window and the original page will be reloaded within a frame, ready for the attack to be performed.
					Note: If you want to prevent the actions that your clicks will perform being executed during recording, use the "disable click actions" checkbox.
					step 7) Then simply execute the sequence of clicks you want your victim to perform.

				• Burp scanner - (https://portswigger.net/support/getting-started-with-burp-scanner) (https://portswigger.net/support/using-burp-scanner)

		• Cross Origin Resource Sharing (CORS)
			It is a mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin, access to selected resources from a different origin. 
			A web application executes a cross-origin HTTP request when it requests a resource that has a different origin (domain, protocol, or port) from its own.
			Run following command and check for results given bellow:
				curl https://test.victim.com -H "Origin: https://geekboy.ninja" -I
			There are three attack scenarios:	
				• Best case for attack:	
					Access-Control-Allow-Origin: https://attacker.com
					Access-Control-Allow-Credentials: true

				• Exploitable case: 
					Access-Control-Allow-Origin: null
					Access-Control-Allow-Credentials: true

				• Bad implementation but not exploitable:
					Access-Control-Allow-Origin: *
					Access-Control-Allow-Credentials: true
					(OR)
					Access-Control-Allow-Origin: *

			• CORStest - CORStest is a quick & dirty Python 3 tool to find Cross-Origin Resource Sharing (CORS) misconfigurations. It takes a text file as input which may contain a list of domain names or URLs. Currently, the following potential vulnerabilities are detected by sending a certain Origin request header and checking for the Access-Control-Allow-Origin response header:
					Developer backdoor: Insecure dev origins like JSFiddle or CodePen are allowed to access this resource
					Origin reflection: The origin is simply echoed in ACAO header, any site is allowed to access this resource
					Null misconfiguration: Any site is allowed to access by forcing the null origin via a sandboxed iframe
					Pre-domain wildcard: notdomain.com is allowed access, which can simply be registered by an attacker
					Post-domain wildcard: domain.com.evil.com is allowed access, which can be registered by an attacker
					Subdomains allowed: sub.domain.com allowed access, exploitable if attacker finds XSS in any subdomain
					Non-ssl sites allowed: A http origin is allowed access to a https resource, allows MitM to break encryption
					Invalid CORS header: Wrong use of wildcard or multiple origins, not a security problem but should be fixed
				Download: git clone https://github.com/RUB-NDS/CORStest.git
				Usage:    usage: corstest.py [arguments] infile
					  positional arguments:
					  infile         File with domain or URL list
					  optional arguments:
   					   -h, --help     show this help message and exit
   					   -c name=value  Send cookie with all requests
   					   -p processes   multiprocessing (default: 32)
   					   -s             always force ssl/tls requests
   					   -q             quiet, allow-credentials only
   					   -v             produce a more verbose output

		• Form Injection/Hijacking
			• Form Napper - It provides the ability to interrupt a submit flow and perform an asynchronous task (such as Credit Card tokenization) and inject the results into your form before continuing.
				Download: https://github.com/braintree/form-napper.git
				Usage & installation: (https://github.com/braintree/form-napper)


		• HTML Injection - (https://github.com/skiptomyliu/solutions-bwapp)

		• HTTP request smuggler
			• HTTP Request Smuggler - This is an extension for Burp Suite designed to help you launch HTTP Request Smuggling attacks, originally created during HTTP Desync Attacks research. It supports scanning for Request Smuggling vulnerabilities, and also aids exploitation by handling cumbersome offset-tweaking for you.
				Download: git clone https://github.com/PortSwigger/http-request-smuggler.git
				Usage: 

			• HTTP Request Smuggler - 		
				Download: git clone https://github.com/nccgroup/BurpSuiteHTTPSmuggler.git

		• Ransomeware/Malware infection attack
			For further info visit: (https://www.helpnetsecurity.com/2020/09/23/your-best-defense-against-ransomware-find-the-early-warning-signs/)
			• Petya - Petya malware only affects Windows computers. Petya required the victim to download it from a spam email, launch it, and give it admin permissions. 
				   (method: https://blog.malwarebytes.com/threat-analysis/2016/04/petya-ransomware/)

			• Defray - The attackers used a Word document with an embedded OLE packager object that installs the ransomware when clicked.

			• FlatChestWare - FlatChestWare is a Hidden Tear-based variant that arrives as a Win32 executable file. The ransomware variant also prompts a bogus 'Windows Update' dialog box,
				    which is intended to trick users into restarting their endpoints.

			• MoWare - using XOR encryption instead of AES. The ransomware encrypts files in the Desktop, Personal, MyMusic, MyPictures and Cookies folder directory. It also checks for an internet
				    connection and disables Registry tools, Task Manager, and CMD.

			• PHP Malware Finder - PHP-malware-finder does its very best to detect obfuscated/dodgy code as well as files using PHP functions often used in malwares/webshells.
				    Detection is performed by crawling the filesystem and testing files against a set of YARA rules. 
				    install: sudo apt-get install yara
				    usage: $ ./phpmalwarefinder -h
					Usage phpmalwarefinder [-cfhtvl] <file|folder> ...
						-c  Optional path to a rule file
						-f  Fast mode
						-h  Show this help message
						-t  Specify the number of threads to use (8 by default)
						-v  Verbose mode
					Or if you prefer to use yara:
						$ yara -r ./php.yar /var/www
			• Others: 
				• theZoo - A Live Malware Repository. theZoo is a project created to make the possibility of malware analysis open and available to the public. Since we have found out that almost all versions of malware are very hard to come by in a way which will allow analysis, we have decided to gather all of them for you in an accessible and safe way
				 	 - WANNACRY
					  - GANDCRAB
					  - SAMSAM
					  - DHARMA
					  - RYUK
					  - ROBINHOOD
					Download: git clone https://www.github.com/ytisf/theZoo
						  cd theZoo
						  pip install --user -r requirements.txt
					Usage:    python theZoo.py

    • Wireless 
		• WiFi hack (using OS wifislax is much better option otherwise use kali linux)
			• Pixie dust - Pixie-Dust attack works by bruteforcing the key for a protocol called WPS. WPS was intended to make accessing a router easier, and it did - for attackers.
				This might not work against all routers, but is definitely worth trying before using a brute force attack against WPS
				Dependencies:	
					apt-get update
					apt-get install build-essential
					apt-get install libpcap-dev
					apt-get install sqlite3
					apt-get install libsqlite3-dev
					apt-get install pixiewps
				Download: git clone https://github.com/t6x/reaver-wps-fork-t6x
				Usage and installation: (https://null-byte.wonderhowto.com/how-to/hack-wifi-using-wps-pixie-dust-attack-0162671/)

			• Aircrack-ng - Aircrack-ng is one of the most popular suites of tools that can be used to monitor, attack, test and crack WiFi networks.
				installation: (https://www.aircrack-ng.org/doku.php?id=install_aircrack)
				Usage: (https://www.cybrary.it/blog/0p3n/crack-wpawpa2-wi-fi-passwords-using-aircrack-ng/)
	
		• Bluetooth
			• Pentesting tools/methods
				• BlueMaho - It is GUI-shell (interface) for suite of tools for testing security of bluetooth devices. It is freeware, opensource, written on python, uses wxPyhon. It can be used for testing BT-devices 
				  for known vulnerabilities and major thing to do – testing to find unknown vulns.
					$ git clone https://github.com/zenware/bluemaho.git
					$ bluemaho.py

				• Bluetooth sniffing and cracking with ubertoothone - following tools are needed for this task: (https://www.security-sleuth.com/sleuth-blog/2015/9/6/now-i-wanna-sniff-some-bluetooth-sniffing-and-cracking-bluetooth-with-the-ubertoothone)
					1) An Ubertooth One device.
					2) An additional Bluetooth dongle or Bluetooth adapter.
					3) A PC which runs Windows, Mac, OSX or Linux.
				   > follow the procedure as given in (https://github.com/greatscottgadgets/ubertooth/wiki/Build-Guide) for tools installation and configuration.
				   > then update Ubertooth firmware asap.
				   > (optional) before you go into any sniffing you walk through some of the Ubertooth Ones other capabilities i.e. spectrum analysis.
						Install kismet as:	
							$ git clone https://www.kismetwireless.net/spectools.git
							$ cd spectools
							$ ./configure
							$ make
 							$ make install
						Now run spectools as:
							$ cd /spectools 
							$ /usr/local/bin/spectool_gtk
				    > Once your Ubertooth is setup and configured you can run the following commands to analyse Bluetooth traffic.
				    > HCITOOL is one of the default linux Bluetooth utilities when running it will return the MAC address and name of any Bluetooth devices in range:
				    			$ hcitool scan
				    > One of the Ubertooth utilities is ubertooth-scan also allows you to passively monitor Bluetooth traffic – below is the command line usage:
							$ ubertooth-scan –s
				    > To run ubertooth-btle in promiscuous mode and output the contents int a pcap file simply run the command:
							$ ubertooth-btle –p –f -c capture.pcap
				    > If you want to follow a specific device you can use the command below where “00000000” would be the devices MAC address:
							$ ubertooth-btle –a 00000000
				    > CRACKLE is an easy to use brute force cracking utility. Since most Bluetooth pairing codes which encrypt traffic between two devices are only 4-6 digits long they can be easily decrypted if the pairing between two devices
				      is captured and this also allows you to listen in on future interactions between the two devices as we will show shortly, but fist lets walk through installing crackle which can be done by following the commands below:
							$ tar xf crackle-0.1.tgz
							$ cd crackle-0.1
							$ make
							$ make install
				    > Once crackle is installed we can begin walking through using crackle to decrypt pcap files with Bluetooth data on them. To do this simply run the following command on your desired pcap file:
							$ crackle -i ltk_exchange.pcap -o decrypted.pcap
				    > Now to listen in on future communications between the two devices run the following command on a pcap file and supply the LTK value you discovered earlier:
							$ crackle -i encrypted_known_ltk.pcap -o decrypted2.pcap -l 7f62c053f104a5bbe68b1d896a2ed49c
				    > ISSUES: With some of my own BLE captures there wasn’t enough packet info to run crackle successfully so I ran crackle with some sample files to give an overview of how the tool works.
					(Refrence: https://www.security-sleuth.com/sleuth-blog/2015/9/6/now-i-wanna-sniff-some-bluetooth-sniffing-and-cracking-bluetooth-with-the-ubertoothone)

			• Vulnerabilities (Exploitable) 
				• BLESA (Bluetooth Low Energy Spoofing Attack), the vulnerability impacts devices running the Bluetooth Low Energy (BLE) protocol.  BLE Spoofing Attacks (BLESA) flaw arises from authentication issues in the process of device reconnection
					Usage: (https://youtu.be/tO9tUl2yfFc)

    • Social Engineering
		• Phishing Attacks
			• The Social-Engineer Toolkit (SET) - The Social-Engineer Toolkit is an open-source penetration testing framework designed for social engineering. SET has a number of custom attack vectors that allow you to make a believable attack quickly.
				Download: git clone https://github.com/hamzasaeed2029/social-engineer-toolkit.git
					  cd setoolkit
					  pip3 install -r requirements.txt 
					  python setup.py
				(although it is pre-installed in kali linux but incase u need to download one the follow above link)
				Usage:    (https://github.com/trustedsec/social-engineer-toolkit/raw/master/readme/User_Manual.pdf)
					  (https://null-byte.wonderhowto.com/how-to/hack-like-pro-spear-phish-with-social-engineering-toolkit-set-backtrack-0148571/)

			• PhishingKitHunter - (or PKHunter) is a tool made for identifying phishing kits URLs used in phishing campains targeting your customers and using some of your own website files (as CSS, JS, ...). This tool - write in Python 3 - is based on the analysis of referer's URL which GET particular files on the legitimate website (as some style content) or redirect user after the phishing session.
				Log files (should) contains the referer URL where the user come from and where the phishing kit is deployed. PhishingKitHunter parse your logs file to identify particular and non-legitimate referers trying to get legitimate pages based on regular expressions you put into PhishingKitHunter's config file.
				Downlaod: git clone https://github.com/hamzasaeed2029/PhishingKitHunter.git
					  pip3 install -r requirements.txt
				Usage:    ./PhishingKitHunter.py --help
				Example:  ./PhishingKitHunter.py -i LogFile2017.log -o PKHunter-report-20170502-013307.csv -c conf/test.conf

			• Seeker - (WARNING: this tool uses tunelling which may compromise ur PC/server! use it in VM only!) 
				Concept behind Seeker is simple, just like we host phishing pages to get credentials why not host a fake page that requests your location like many popular location based websites. Seeker Hosts a fake website on In Built PHP Server and uses Serveo to generate a link which we will forward to the target, website asks for Location Permission and if the target allows it
				
				Download: git clone https://github.com/thewhiteh4t/seeker.git
					  cd seeker/
					  chmod 777 install.sh
					  ./install.sh
				Usage:    ./ngrok http 8080 (download ngrok and run this command in that directory using another server session)
					  python3 seeker.py -t manual  

		• QRLjacking 
			QRLJacking or Quick Response Code Login Jacking is a simple social engineering attack vector capable of session hijacking affecting all applications that rely on the “Login with QR code” feature as a secure way to login into accounts. In a nutshell, the victim scans the attacker’s QR code which results in session hijacking.
				$ git clone https://github.com/OWASP/QRLJacking
				$ cd QrlJacking-Framework
				$ pip install -r requirements.txt
				$ python .py

		• Tailgating 
			This type of attack involves an attacker asking for access to a restricted area of an organization’s physical or digital space. A common scenario we see in tailgating is an attacker asking an employee to “hold the door” to a restricted area because they forgot their access or identity card, or even merely asking an employee to borrow their machine.

		• Pre-texting
			In a pretexting attack, the attacker poses as a person of trust, such as a family member, someone from the target’s organization like a member of the IT department or a manager, or any other individual holding authority over the target.
			By impersonating someone known and trusted, it’s easy for the attacker gain private information from the target or even ask for money directly.

		• Dumpster Diving
			Usually important information can be found in waste bins of the office. look for shredded papers, signatures, operating procedures, USB sticks, Memory cards, sticky notes, headed papers.

		• Keylogging
			• Metasploit keylogger - A keylogger (short for keystroke logger) is software that tracks or logs the keys struck on your keyboard, typically in a covert manner so that you don’t know that your actions are being monitored.
				step 1) use the dllloader exploits and reverse TCP payload in order to open up a meterpreter session on the victim’s computer. (using kali linux)
				step 2) Before we start the keylogger and start capturing logs, we would need to migrate explorer.exe process as we don’t want the our exploit to get closed, In order to migrate the process we would need the PID(Process ID) of the process,
					In order to get the PID type “ps” on the command line.
				step 3) Once you know the exact process PID type “Migrate” command along with with the PID so incase if the PID is 1372, you will type “migrate 1372″ (without quotes)
				step 4) Now just type “keyscan_start” to start the keylogger.
				step 5) Now just sit back and relax, In order to harvest keystores all you need to do is type the “keyscan_dump” command

    • ALL-in-one tools
		• WebHackersWeapons - A collection of cool tools used by Web hackers. Happy hacking , Happy bug-hunting. For more info visit: (https://github.com/hamzasaeed2029/WebHackersWeapons)
			Download: git clond https://github.com/hamzasaeed2029/WebHackersWeapons.git
			compile:  make contribute
			Usage of ./add-tool:
					-isFirst
				 (if you add new type, it use:)
					-url string
				Example: ./add-tool -url https://github.com/sqlmapproject/sqlmap
					then select suitable options.
				build added tools:
					go build add-tool.go
					go build distribute-readme.go
				Add common tools as: (https://asciinema.org/a/318456)
					./add-tool -url https://github.com/hahwul/s3reverse
					./add-tool -url https://github.com/nccgroup/BurpSuiteLoggerPlusPlus

		• hackingtool - All in One Hacking tool For Hackers and pentesters.
			Download: git clone https://github.com/Z4nzu/hackingtool.git

		• Awesome Hacking Tools - A curated list of awesome Hacking Tools. 
			for more info visit: (https://github.com/hamzasaeed2029/Awesome-Hacking-Tools)

:::REFERENCES:

https://github.com/hamzasaeed2029/DLLSpy
https://github.com/hamzasaeed2029/Awesome-Hacking-Tools
https://purplesec.us/types-penetration-testing/
https://resources.infosecinstitute.com/category/certifications-training/pentesting-certifications/top-pentesting-tools/#gref
https://gbhackers.com/network-penetration-testing-checklist-examples/
https://www.softwaretestinghelp.com/penetration-testing-tools/
https://resources.infosecinstitute.com/the-types-of-penetration-testing/#gref
https://owasp.org/www-project-web-security-testing-guide/assets/archive/OWASP_Web_Application_Penetration_Checklist_v1_1.pdf
https://purplesec.us/firewall-penetration-testing/
https://purplesec.us/perform-successful-network-vulnerability-assessment/
https://www.solarwindsmsp.com/products/risk-intelligence/trial
https://www.veracode.com/security/what-is-a-worm
https://www.hackingloops.com/penetration-testing-of-men-in-middle-attacks-using-arp-spoofing/
https://github.com/ret2jazzy/SnCrawler
https://securityonline.info/not-your-average-web-crawler-web-crawler-for-bug-hunting/
https://www.veracode.com/security/rootkit
https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet
https://www.helpnetsecurity.com/2019/11/15/ransomware-attack-techniques/
https://blog.malwarebytes.com/threat-analysis/2016/04/petya-ransomware/
https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/the-ongoing-development-of-hidden-tear-variants
https://www.backblaze.com/blog/complete-guide-ransomware/
https://github.com/nabla-c0d3/ssl-kill-switch2
https://kalilinuxtutorials.com/xsstrike-xss-scanner/
https://cirt.net/nikto2/
https://geekflare.com/open-source-web-security-scanner/
https://wfuzz.readthedocs.io/en/latest/
https://github.com/zaproxy/zaproxy
https://www.youtube.com/playlist?list=PLEBitBW-Hlsv8cEIUntAO8st2UGhmrjUB
https://wapiti.sourceforge.io/
https://subgraph.com/vega/
https://portswigger.net/support/using-burp-to-find-clickjacking-vulnerabilities
https://github.com/blaCCkHatHacEEkr/PENTESTING-BIBLE
https://phoenixinfosec.wordpress.com/2014/06/23/how-to-use-a-keylogger-inside-metasploit-using-meterpreter-in-kali-linux/
https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html
https://portswigger.net/burp/burp-scanner
https://www.pentestpartners.com/security-blog/clickjacking-explained-in-detail/
https://miloserdov.org/?p=2874
https://miloserdov.org/?p=2863
https://enteletaor.readthedocs.io/en/latest/quickstart.html
https://github.com/sqlmapproject/sqlmap
https://github.com/sqlmapproject/sqlmap/wiki/Usage
https://www.wordfence.com/learn/finding-removing-backdoors/
https://github.com/djeraseit/PHP-backdoor-detector
https://github.com/GinjaChris/pentmenu
https://www.digitalocean.com/community/tutorials/how-to-use-rkhunter-to-guard-against-rootkits-on-an-ubuntu-vps
https://subgraph.com/vega/
https://www.hackingloops.com/penetration-testing-of-men-in-middle-attacks-using-arp-spoofing/
https://www.youtube.com/watch?v=hI9J_tnNDCc
https://github.com/europa502/shARP
https://www.poftut.com/ettercap-tutorial-network-sniffing-man-middle/
https://null-byte.wonderhowto.com/how-to/hack-wifi-using-wps-pixie-dust-attack-0162671/
https://www.aircrack-ng.org/
https://www.aircrack-ng.org/doku.php?id=getting_started
https://hackertarget.com/sqlmap-tutorial/
https://www.we45.com/blog/3-ways-to-exploit-misconfigured-cross-origin-resource-sharing-cors#:~:text=Cross%2DOrigin%20Resource%20Sharing(CORS)%20is%20a%20mechanism%20that,the%20domain%20initiating%20the%20request.
https://portswigger.net/web-security/os-command-injection
https://searchsecurity.techtarget.com/definition/insecure-deserialization
http://www.geekboy.ninja/blog/exploiting-misconfigured-cors-cross-origin-resource-sharing/
https://tools.kali.org/wireless-attacks/bluemaho
https://www.security-sleuth.com/sleuth-blog/2015/9/6/now-i-wanna-sniff-some-bluetooth-sniffing-and-cracking-bluetooth-with-the-ubertoothone
https://www.officialhacker.com/bluetooth-sniffer-linux/
https://null-byte.wonderhowto.com/how-to/bt-recon-snoop-bluetooth-devices-using-kali-linux-0165049/
https://threatpost.com/bluetooth-spoofing-bug-iot-devices/159291/
https://youtu.be/tO9tUl2yfFc
https://resources.infosecinstitute.com/qrl-jacking/#gref
https://portswigger.net/web-security/ssrf
https://tools.kali.org/exploitation-tools/commix
https://portswigger.net/web-security/xxe
https://www.softwaretestinghelp.com/penetration-testing-tools/
https://www.tenable.com/products/nessus/nessus-essentials
https://sourceforge.net/projects/sqlninja/
https://gbhackers.com/network-penetration-testing-checklist-examples/
https://portswigger.net/web-security/ssrf
https://github.com/fwaeytens/dnsenum
https://github.com/TagWolf/dnsenum
https://portswigger.net/web-security/request-smuggling
https://github.com/PortSwigger/http-request-smuggler
https://github.com/nccgroup/BurpSuiteHTTPSmuggler
https://www.youtube.com/watch?v=G3hpAeoZ4ek
https://github.com/hamzasaeed2029/lynis
https://blog.cloudflare.com/inside-shellshock/
https://github.com/hamzasaeed2029/Pentest-Tools-Framework
https://www.sans.org/blog/exploiting-xxe-vulnerabilities-in-iis-net/
https://www.hahwul.com/archive/
https://github.com/1N3/MassBleed
https://github.com/hahwul/WebHackersWeapons
https://github.com/cure53/H5SC
https://github.com/swisskyrepo/PayloadsAllTheThings
https://stackoverflow.com/questions/45463176/sqlmap-using-technique
https://github.com/rohan-tcd/kick-off-OWASP_WebApp_Security_Vulnerabilities
https://www.computerworld.com/article/3003957/review-5-memory-debuggers-for-linux-coding.html?page=2
https://www.hackplayers.com/2018/05/dnsmorph-permutacion-dominios.html
https://resources.infosecinstitute.com/phishing-and-social-engineering-techniques-3-0/
https://www.netsparker.com/blog/web-security/xxe-xml-external-entity-attacks/
https://resources.infosecinstitute.com/finding-and-exploiting-xxe-xml-external-entities-injection/
https://www.acunetix.com/vulnerabilities/web/crlf-injection-http-response-splitting/
https://pentesttools.net/crlfmap-a-tool-to-find-http-splitting-vulnerabilities/
https://github.com/cujanovic/CRLF-Injection-Payloads/blob/master/CRLF-payloads.txt
https://github.com/mgeeky/Penetration-Testing-Tools/blob/master/web/xml-attacks.md
https://github.com/mgeeky/Penetration-Testing-Tools/tree/master/web
https://resources.infosecinstitute.com/finding-and-exploiting-xxe-xml-external-entities-injection/
https://null-byte.wonderhowto.com/how-to/escape-restricted-shell-environments-linux-0341685/




